= Chionographis User's Guide
:revnumber:, :revdate:
:source-highlighter: pygments

== Overview

link:https://github.com/furfurylic/chionographis[Chionographis] is an Ant task that performs cascading XML transformation.
This transformation is done with following three primitive operations applied arbitrary number of times in arbitrary order:

* XML transformation with XSLT stylesheet,
* joining of multiple XML documents into one,
* and snipping fragments from XML documents.

=== Requirements

Running Chionographis requires JRE installed, of version 1.8 or later. And it also requires link:http://ant.apache.org/[Apache Ant] installed, of version 1.8.0 or later.

=== License

These codes are licensed under link:https://creativecommons.org/publicdomain/zero/1.0/deed[CC0].

== Example

To use Chionographis, first you have to define the task:

[source,xml]
----
<!-- Define a path which includes chionographis.jar -->
<path id="chionographis">
  <fileset dir="./lib" includes="*.jar"/>
</path>

<!-- Define chionographis task with the path -->
<typedef classpathref="chionographis"
         resource="net/furfurylic/chionographis/types.properties"/>
----

Then you can use _chionographis_ task:

[source,xml]
----
<target name="flora-genera">
  <chionographis srcdir="flora" includes="*.xml">
    <all root="flora">
      <transform style="flora/styles/to-genera.xsl">
        <snip select="/genera/genus">
          <doctype systemid="genus.dtd"/>
          <output destdir="flora/genera" refer="/genus/@name">
            <globmapper from="*" to="*.xml"/>
          </output>
        </snip>
      </transform>
    </all>
  </chionographis>
</target>
----

This target does following:

 . first reads and parses all files with '.xml' extension in 'flora' directory,
 . then collects all parsed documents into a new document whose document element is +<flora>...</flora>+,
 . then transforms this document with XSLT stylesheet 'flora/styles/to-genera.xsl',
 . then finds all fragments from the resulted document which matches XPath criterion +/genera/genus+ and inserts document type declarations like +<!DOCTYPE genus SYSTEM "genus.dtd">+ into them,
 . finally writes each fragment to a file whose path is 'flora/genera/XXX.xml', where +XXX+ is the string value of XPath expression +/genus/@name+ of each fragment document (that is, +XXX+ of the document element +<genus name="XXX">...</genus>+).

Additionally, it might be noteworthy that:

 * this target recognizes whether the output files are up to date for the input files (including the stylesheet files), and, if so, cuts out the file output process,
 * and if the runtime environment has multiple available processors, this target tries to take advantage of them to parallelize the reading and writing of the files.

== Defining the task and related types

'chiongraphis.jar' exposes one task and one related type:

[options="header"]
|=================
| Class | Description
|+net.furfurylic.chionographis.Chionographis+|The core task.
|+net.furfurylic.chionographis.Depends+|An optional helper type to instruct dependency between resources to the task.
|=================

You can define these task and type (hereinafter called types) with Ant's +<typedef>+ task:

[source,xml]
----
<typedef name="chionographis"
         classname="net.furfurylic.chionographis.Chionographis"/>
<typedef name="depends"
         classname="net.furfurylic.chionographis.Depends"/>
----

But 'chionographis.jar' contains 'net/furfurylic/chionographis/types.properties' as follows:

[source,properties]
----
chionographis=net.furfurylic.chionographis.Chionographis
depends=net.furfurylic.chionographis.Depends
----

Thus you can define types as follows if the names (+chionographis+ and +depends+) are OK for you:

[source,xml]
----
<typedef resource="net/furfurylic/chionographis/types.properties"/>
----

So far, we supposed that 'chionographis.jar' was included into Ant's classpath
whether by a command line option as follows or anything else:

[source,shell]
----
ant -lib ./lib/chionographis.jar flora-genera
----

Of course you can tell to Ant in the build file "you can find the types here" instead:

[source,xml]
----
<path id="chionographis">
  <fileset file="./lib" includes="*.jar"/>
</path>

<typedef classpathref="chionographis"
         resource="net/furfurylic/chionographis/types.properties"/>
----

== Drivers, sinks and filters

In Chionographis, cascading XML processing is accomplished by coordination of _actors_,
each of which represents one XML processing. Actors are classified into three caterogies:
 _drivers_, _sinks_ and _filters_.

[options="header", cols="1,4,4"]
|=================
| Category | Description | Example
|Driver|Passes XML documents to _sinks_ it holds.|_Chionographis_, _Transform_, _All_ and _Snip_
|Sink|Receives XML documents from its _driver_.|_Output_, _Transform_, _All_ and _Snip_
|Filter|Is a _driver_ and a _sink_.|_Transform_, _All_ and _Snip_
|=================

Chionographis has five actors synopsized below:

[options="header", cols="3,2,10"]
|=================
| Actor | Category | Synopsis
| <<actors.chionographis, Chionographis>> |Driver|Reads XML documents from external sources (called _original_ sources) and passes them to its sinks.
| <<actors.transform, Transform>> |Filter|Receives XML documents from its driver, transforms them by an XSLT stylesheet, and passes them to its sinks.
| <<actors.all, All>> |Filter|Receives XML documents from its driver, collects all of them into a new XML documents, and passes it to its sinks.
| <<actors.snip, Snip>> |Filter|Receives XML documents from its driver, extracts all document fragments matching an XPath expression, and passes them to its sinks with each fragment being one document.
| <<actors.output, Output>> |Sink|Receives XML documents from its driver and writes them into files.
|=================

[[actors.chionographis]]
=== Chionographis driver

A _Chionographis_ driver reads external XML documents from files and emits them into sinks it has.
As of now, the sources of XML documents (called _original_ sources) are files only.

This is an Ant task too, and can be configured to read documents from various sources with
Ant framework. For example, it can have filesets and exclude patterns of Ant.
For full set of its ability to accept the source information, consult Ant's document
(this task extends from _MatchingTask_, which is a common base class of Ant's core tasks, for example, _Javac_ and _Delete_.)

==== Attributes

[options="header", cols="1,3,1"]
|=================
| Attribute | Description | Required
|baseDir|The base directory of this task.| No; defaults to the project's base directory
|srcDir|The source directory. If not absolute, will be resolved by the base directory of the task.| No; defaults to the task's base directory
|force|Whether this driver proceed to process even if existing output files seem new enough. The descendants (sinks, sinks' sinks, and so on) can not override this to +no+.| No; defaults to +no+
|cache|Whether this driver uses a document cache shared in Chionographis library for external parsed entities. When set to +yes+ explicitly, use of _XMLCatalog_ (see "Nested element" section) will be disabled.| No; defaults to +no+ if an _XMLCatalog_ is added, +yes+ otherwise
|verbose|Whether this task promotes log levels from +verbose+ to +info+ for some log entries, such as reports of document output.| No; defaults to +no+
|parallel|Whether parallel execution is employed. The parallel execution is done with static thread pool whose maximum thread count coincides with the available processor count.| No; defaults to +yes+

|dryRun|Whether "dry run" mode is enabled. In "dry run" mode, sinks avoid finalizing all of their outputs (to be specific, they do not write files). +
You can enable this mode also by setting +net.furfurylic.chionographis.dry-run+ Ant property to +true+.
If you set this property to +false+, "dry run" mode is disabled regardless of this driver's attribute. That is, the latter way (through the Ant property) is stronger and definitive. | No; defaults to +no+

|failOnError|Whether fatal errors should make the build fail. | No; defaults to +yes+
|failOnNonfatalError|Whether nonfatal errors should make the build fail. A nonfatal error is an error attributed to one input source and not likely to affect processing of other input sources. Note that this attribute has no effect if _failOnError_ is set to +no+. | No; defaults to +no+

|Other _MatchingTask_'s attributes|Please consult Ant's document.|No
|=================

[[actors.chionographis.children]]
==== Nested elements

[options="header", cols="1,3,1"]
|=================
| Element | Description | Required

|meta|An instruction that the driver shall put a processing instruction (PI) which includes the meta-information of the original source document. The PIs shall be put as the first children of the document element. If there are multiple PIs to be put, their document order shall be the same as the order of these elements. | No; can be appear arbitrary number of times

|namespace|A pair of a namespace prefix and a namespace name which is mapped from the prefix. This mapping is used by descendant _Transform_, _All_ and _Snip_ filters.| No; can appear arbitrary number of times

|depends|Dependency between resources applied to the orignal source documents. This information are used only to decide whether the corresponding outputs are up to date. +
For details, see <<dependency.depends, "Depends element">> section. | No; can appear at most once

|xmlcatalog|An Ant's _XMLCatalog_ for the processing of the original source files and XSLT transformation performed by _Transform_ filters. Use of this catalog is disabled by setting _cache_ attribute of the drivers to +yes+ explicitly. Also see note.| No; can appear at most once

|transform|A _Transform_ sink. .4+| No; at least one sink required

|all|An _All_ sink.

|snip|A _Snip_ sink.

|output|An _Output_ sink.

|Other _MatchingTask_'s nested elements|Please consult Ant's document.|No
|=================

[NOTE]
Multithread-safety of Ant's _XMLCatalog_ is not documented explicitly.
In this regard, _Chinographis_ driver synchronizes accesses to _XMLCatalogs_ added directly to it.

===== Meta element's attributes

[options="header", cols="1,3,1"]
|=================
| Attribute | Description | Required

|name|The target of the processing instruction (PI).| No; defaulted to +chionographis-+ and the type concatenated, for example, +chionographis-file-name+

|type|The type of the meta-information, which is the data of PI.  +
When +uri+, the data shall be the absolute URI of the original source. +
When +file-name+, the data shall be the last part of the path of the URI. +
When +file-title+, the data shall be the substring of the file name before its last period (+.+).| Yes
|=================

===== Namespace element's attributes

[options="header", cols="1,3,1"]
|=================
| Attribute | Description | Required
|prefix|The prefix.| Yes
|uri|The namespace name (URI) mapped from the prefix. | Yes
|=================


[[actors.transform]]
=== Transform filter

A _Transform_ filter receives XML documents, and apply transformation by an XSLT stylesheet,
generates output XML documents one per one input document and pass them to sinks it has.

==== Attributes

[options="header", cols="1,3,1"]
|=================
| Attribute | Description | Required

|style|The URI or the file path of the XSLT stylesheet. If not absolute, will be resolved by the base directory of the task. +
 If this attribute is omitted, the _Transform_ filter get the stylesheet location through the https://www.w3.org/TR/xml-stylesheet/["Associating Style Sheets with XML documents"] mechanism.| No

|force|Whether this filter proceed to process even if existing output files seem new enough. The descendants (sinks, sinks' sinks, and so on) can not override this to +no+.| No; defaults to +no+

|cache|Whether this driver uses a document cache shared in Chionographis library for +<xsl:include>+, +<xsl:import>+, XPath +document()+ functions, and external entities referred by documents above.  +
When set to +yes+ explicitly, use of _XMLCatalog_ (see <<actors.chionographis.children, "Nested element" section of the task driver>>) will be invalidated.| No; defaults to +no+ if an _XMLCatalog_ is added to the task driver, +yes+ otherwise

|=================

==== Nested elements

[options="header", cols="1,3,1"]
|=================
| Element | Description | Required

|assoc|A narrowing information of the search of the associated stylesheet.| No; at most one can be specified

|param|A key-value pair of stylesheet parameter. As of now, only string parameter values are supported.| No; can appear arbitrary number of times

|depends|Dependency between resources applied to the stylesheet. This information are used only to decide whether the corresponding outputs are up to date. +
For details, see <<dependency.depends, "Depends element">> section.| No; can appear at most once

|transform|A _Transform_ sink. .4+| No; at least one sink required

|all|An _All_ sink.

|snip|A _Snip_ sink.

|output|An _Output_ sink.
|=================

[NOTE]
_style_ and _assoc_ can be specified exclusively.

===== Assoc element's attributes

[options="header", cols="1,3,1"]
|=================
| Attribute | Description | Required
|media|The media for which the referenced stylesheet applies. | No
|title|The title of the referenced stylesheet in a stylesheet set. | No
|charset|An advisory character encoding for the referenced stylesheet. | No
|=================

===== Param element's attributes / text content

[options="header", cols="1,3,1"]
|=================
| Attribute / Element contents | Description | Required

|name|The name of the stylesheet parameter. +
Supported forms are +localName+, +prefix:localName+ and +\{namespaceURI\}localName+.
In the first form, the name doesn't belong to any namespace.
In the second form, the name belongs to a namespace whose name is mapped from prefix using the _Chionographis_'s child _namespace_ elements.| Yes

|expand|Whether Ant properties in this element's contents are expanded. | No; defaults to +no+

|_Text_|The value of the stylesheet parameter. | No
|=================


[[actors.all]]
=== All filter

An _All_ filter receives XML documents, collects all of their document elements,
arranges them as child elements of a newly-created XML document's document element,
and passes the resulted document to sinks it has.
The number of document passed to the sinks is always one.

[NOTE]
The document order of the collected elements in the resulted document is not specified.
If the order is significant, you should sort the elements by a descendant _Transform_ filter.

==== Attributes

[options="header", cols="1,3,1"]
|=================
| Attribute | Description | Required

|root|The name of the document element of the resulted document. +
Supported forms are +localName+, +prefix:localName+ and +\{namespaceURI\}localName+.
In the first form, the name doesn't belong to any namespace.
In the second form, the name belongs to a namespace whose name is mapped from the prefix using the _Chionographis_'s child _namespace_ elements.| Yes

|force|Whether this filter proceed to process even if existing output files seem new enough.
The descendants (sinks, sinks' sinks, and so on) can not override this to +no+.| No; defaults to +no+; see note
|=================

[NOTE]
If the set of the original source documents is constant (regardless of whether
each document's content is modified), setting _force_ to +no+ or
leaving it to be defaulted is generally safe.
Otherwise, setting _force_ to +no+ is possibly dangerous because the _All_
filter can overlook the possible changes in resulted document when source
documents are added or removed.

==== Nested elements

[options="header", cols="1,3,1"]
|=================
| Element | Description | Required
|doctype|The document type of the emitted documents. |No; at most one can be specified
|transform|A _Transform_ sink. .4+| No; at least one sink required
|all|An _All_ sink.
|snip|A _Snip_ sink.
|output|An _Output_ sink.
|=================

[[actors.all.children.doctype]]
===== Doctype element's attributes

[options="header", cols="1,3,1"]
|=================
| Attribute | Description | Required
|publicID|The public identifier of the document type. | No unless _systemID_ is specified
|systemID|The system identifier of the document type. | No unless _publicID_ is specified
|=================


[[actors.snip]]
=== Snip filter

A _Snip_ filter receives XML documents, generates document fragments pointed by an XPath criterion from them,
and passes the resulted document fragments as independent documents to sinks it has.

==== Attributes

[options="header", cols="1,3,1"]
|=================
| Attribute | Description | Required

|select|An XPath expression which specifies the unit in which the source document is snipped. +
It can include names which belong some namespaces only when the namespaces are denoted by prefixes defined in the _Chinographis_'s child _namespace_ elements.| Yes

|force|Whether this filter proceed to process even if existing output files seem new enough. The descendants (sinks, sinks' sinks, and so on) can not override this to +no+.| No; defaults to +no+
|=================

==== Nested elements

[options="header", cols="1,3,1"]
|=================
| Element | Description | Required
|doctype|The document type of the emitted documents. For details of this element, see <<actors.all.children.doctype, "Doctype element's attributes">> in "All filter" section. |No; at most one can be specified
|transform|A _Transform_ sink. .4+| No; at least one sink required
|all|An _All_ sink.
|snip|A _Snip_ sink.
|output|An _Output_ sink.
|=================


[[actors.output]]
=== Output sink

An _Ouput_ sink receives XML documents and writes them into filesystem files.

==== Attributes

[options="header", cols="1,3,1"]
|=================
| Attribute | Description | Required

|destDir|The destination directory. If not absolute, will be resolved by the base directory of the task.| No; defaults to the task's base directory

|dest|The destination file path. If not absolute, will be resolved by the destination directory.| No; see note

|refer|An XPath expression which points the content of the _source document_ (see below) required to decide the output file path. +
The string value of the pointee is used as an input to the installed file mapper if any, otherwise is used as if it is set to _dest_ attribute.  +
_Transform_ drivers retrieve the pointee from the source documents of the transformation; on the other hand, the _Chionographis_, _All_, and _Snip_ drivers retrieve from their result document (the source document of this sink). +
The XPath expression can include names which belong some namespaces only when the namespaces are denoted by prefixes defined in the task's child _namespace_ elements.| No; see note

|mkDirs|Whether this sink creates parent directories of the destination file if needed.| No; defaults to +yes+

|force|Whether this sink creates output files even if existing files seem new enough.| No; defaults to +no+

|timid|Whether this sink avoids overwriting existing files which already have identical contents to be written. In cases where overwriting files triggers other downstream processes, setting to +yes+ might cut down the total cost dramatically. | No; defaults to +no+
|=================

==== Nested elements

[options="header", cols="1,3,1"]
|=================
| Element | Description | Required
|_File mappers_|A mapper which makes the output file names from the original source file names if _refer_ attribute not specified, otherwise from the extracted source document content pointed by _refer_ attribute.| No; see note
|=================

[NOTE]
_dest_ and file mappers can be specified exclusively.
_dest_ and _refer_ can be specified exclusively.
At least one of _dest_, _refer_ and a file mapper must be specified.
At most one file mapper can be installed.


== Specifying dependency between resources

All drivers of Chionographis don't process inputs whose corresponding outputs are up to date unless they are not forced to process by _force_ attrubutes.

By default, drivers consider outputs to be up to date when they exist and their last modified times are equal to or newer than either their corresponding inputs or their corresponding stylesheet.
Thus, in following cases, outputs will be regarded as up to date and left untouched:

The input XML files depend on other files which are newer:: For example, newer DTD files and newer external parsed entities don't make the input files processed.
The XSLT stylesheet files depend on other files which are newer:: For example, newer external document files referred by +document()+ XSLT functions and external stylesheet files imported by +<xsl:import>+ don't make the input files processed either.

To make _Chionographis_ task proceed to processing in above cases, you can use Ant's built-in _Dependset_ task to remove outputs prior to executing _Chionographis_ task. This task, however, requires output paths to be known statically. To be specific, it cannot handle outputs generated by _Output_ sink accompanied with _refer_ attrubute.

_Chionographis_ task offers a more flexible way to take care of rather complex dependency between resources such as above, which is to use _Depends_ elements.

[[dependency.depends]]
=== Depends element

_Depends_ elements can appear as children of _Chionographis_ and _Transform_ drivers. In addition, they can be placed outside targets, that is, as children of the project to be used by multiple targets.

_Depends_ elements must have Ant's resource collections as children, such as _fileset_ and _filelist_, unless they have nested _Depends_ elements as below.
These children resource collections specify referenced resources.

_Depends_ elements can have a Ant's file selector as a child.
When they have one, the referenced resources are considered to be referenced by the files selected by the selector.
Otherwise, the referenced resources are regarded as referenced unconditionally.

_Depends_ elements can be nested inside other _Depends_ elements to form larger and more complex dependency.

_Depends_ elements can have _refid_ attribute to be a reference to another _Depends_ element.
Those which have _refid_ attribute cannot have either any other attributes or any child elements.

_Chionographis_ and _Transform_ drivers use their child _Depends_ elements recursively.
That is, they scan the dependency again to find resources referenced by already-known referenced resources.
But _Depends_ elements which have child resource collections and don't have a file selector are not referred in recurring scan.

==== Example

Suppose you define a composite _Depends_ element outside targets in your build file as below:

[source,xml]
----
<depends id="dependency.flora">
  <depends basedir="flora/genera" filename="*.xml"> <!-- A -->
    <filelist files="flora/genera/genus.dtd"/>
  </depends>
  <depends basedir="flora" filename="**/*.dtd"> <!-- B -->
    <filelist files="base.dtd"/>
  </depends>
</depends>
----

Then you can refer it in your _Chionographis_ task with _refid_:

[source,xml]
----
<chinographis srcdir="flora/genera" includes="*.xml">
  <depends refid="dependency.flora"/>
  <transform style="flora/styles/genus-to-html.xsl">
    <output destdir="html/flora/genera">
      <globmapper from="*.xml" to="*.html"/>
    </output>
  </transform>
</chionographis>
----

If _Chionographis_ finds 'flora/genera/physostigma.xml', it is deemed to refer to (or depend on) 'flora/genera/genus.dtd' due to dependency A.
Then _Chionographis_ scans the dependency recursively and deems 'flora/genera/genus.dtd' to refer to 'base.dtd' due to dependency B.

Hence _Chionographis_ decides whether to include 'flora/genera/physostigma.xml' into its process
by comparing the last modified times of the four files:

* 'flora/genera/physostigma.xml'
* 'flora/genera/genus.dtd'
* 'base.dtd'
* 'html/flora/genera/physostigma.html'

If at least one of the first three files is newer than the last one, _Chionographis_ decide to include 'flora/genera/physostigma.xml' to its process.


==== Depends element's attributes and child elements

[options="header", cols="1,3,1"]
|=================
| Attribute / Nested element | Description | Required
|Attribute: absent|An instruction how referenced resources which do not exist are treated. +
When +fail+, the execution will terminate with an error. +
When +new+, the absent referenced resources are regarded ``very new'', so that the corresponding output files are regarded as not up to date. +
When +ignore+, the absent referenced resources are silently ignored.| No; defaults to +fail+
|Attribute: baseDir|The base directory where the child file selector applied. | Yes if child file selector exists; no otherwise
|Attribute: fileName|+<depends basedir="a" filename="b">+ is a shorthand notation of +<depends basedir="a"> <filename name="b"/>+.| No; see note
|Attribute: file|+<depends file="a/b">+ is a shorthand notation of +<depends basedir="a"> <filename name="b"/>+.| No; see note
|Element: _file selector_|An selector which limits application of this dependency. | No; can appear at most once; see note
|Element: _resource collection_|The referenced resources represented by Ant resource collections. | No; can appear arbitrary number of times, but at least either a _resource collection_ or a _depends_ element must be specified.
|Element: _depends_|Nested dependency. | No; can appear arbitrary number of times, but at least either a _depends_ element or a _resource collection_ must be specified.
|=================

[NOTE]
_fileName_ and _file_ are literally shorthand notations as described above.
Thus either _baseDir_ or _fileName_ cannot be specified with _file_.
Similarly, either _fileName_ or _file_ cannot be specified with a file selector.
Specifying _fileName_ requires also _baseDir_ to be specified.

== Parallelism

Chionographis task tries to execute in parallel unless the _Chionographis_ driver's _parallel_ attribute is set to +no+.
Actually, Chionographis task employs parallel execution only in following two situations:

Multiple original sources:: In this case, the _Chionographis_ driver reads, parses and passes them to its sinks in parallel.
Multiple fragments generated by a Snip filter:: In this case, the _Snip_ filter passes them to its sinks in parallel.

It is notable that an _All_ filter is an end point of parallel execution, for _All_ filters inherently have to wait for all the source documents to be accumulated.
Of course, if there is a _Snip_ filter in descendant of an _All_ filter, it will be a beginning point of parallel execution again.

All Chionographis tasks share one common thread pool for parallelism.
So if you run multiple Chinograhis tasks simultaneously in an Ant's _Parallel_ task, they are likely to share the resource
(to be specific, it is not the case that each Chinonographis task tries to utilize all the available processors as if there are no other processor users).

== Version information

If you want to know the version of your 'chionographis.jar', execute the Main-Class of the JAR:

[source,shell]
----
java -jar ./lib/chionographis.jar
----

Instead, you can be informed of it by executing _Chionographis_ task with "debug" logging level:

[source,shell]
----
ant -d target-name
----

[NOTE]
If your 'chionographis.jar' has been built in an environment in which
the version information is not available (for example, 'git' command is not
installed), you cannot get any version information by ways above.
