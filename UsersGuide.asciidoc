= Chionographis User's Guide
:revnumber:, :revdate:

== Overview

link:https://github.com/furfurylic/chionographis[Chionographis] is an Ant task that performs cascading XML transformation.
This transformation is done with following three primitive operations applied arbitrary number of times in arbitrary order:

* XML transformation with XSLT stylesheet,
* joining of multiple XML documents into one,
* and snipping fragments from XML documents.

=== Requirements

Running Chionographis requires JRE installed, of version 1.8 or later. And it also requires link:http://ant.apache.org/[Apache Ant] installed, of version 1.8.0 or later.

=== License

These codes are licensed under link:https://creativecommons.org/publicdomain/zero/1.0/deed[CC0].

== Example

To use Chionographis, first you have to define the task:

[source,xml]
----
<taskdef name="chionographis"
         classname="net.furfurylic.chionographis.Chionographis"/>
----

Then you can use the task:

[source,xml]
----
<target name="flora-genera">
  <chionographis srcdir="flora" includes="*.xml">
    <all root="flora">
      <transform style="flora/to-genera.xsl">
        <snip select="/genera/genus">
          <output destdir="flora-genera" refer="/genus/@name">
            <globmapper from="*" to="*.xml"/>
          </output>
        </snip>
      </transform>
    </all>
  </chionographis>
</target>
----

This target does following:

 . first reads and parses all files with '.xml' extension in 'flora' directory,
 . then collects all parsed documents into a new document whose document element is +<flora>...</flora>+,
 . then transforms this document with XSLT stylesheet 'flora/to-genera.xsl',
 . then finds all fragments from the resulted document which matches XPath criterion +/genera/genus+,
 . finally writes each fragment to a file whose path is 'flora-genera/XXX.xml', where +XXX+ is the string value of XPath expression +/genus/@name+ of each fragment document (that is, +XXX+ of the document element +<genus name="XXX">...</genus>+).

Additionally, it might be noteworthy that:

 * this target recognizes whether the output files are up to date for the input files, and, if so, cuts out the file output process,
 * and if the runtime environment has multiple available processors, this target tries to take advantage of them to parallelize the reading and writing of the files.

To run this target you can use the usual `ant` command, but you have to make Ant able to find 'chionographis.jar':

[source,sh]
----
ant -lib the-directory-which-contains-chionographis.jar -f sample.xml flora-genera
----

== Drivers, sinks and filters

In Chionographis, cascading XML processing is accomplished by coordination of _actors_,
each of which represents one XML processing. Actors are classified into three caterogies:
 _drivers_, _sinks_ and _filters_.

[options="header", cols="1,4,4"]
|=================
| Category | Description | Example
|Driver|Passes XML documents to _sinks_ it holds.|_Chionographis_, _Transform_, _All_ and _Snip_
|Sink|Receives XML documents from its _driver_.|_Output_, _Transform_, _All_ and _Snip_
|Filter|Is a _driver_ and a _sink_.|_Transform_, _All_ and _Snip_
|=================

Chionographis has five actors synopsized below:

[options="header", cols="3,2,10"]
|=================
| Actor | Category | Synopsis
| Chionographis |Driver|Reads XML documents from external sources (called _original_ sources) and passes them to its sinks.
| Transform |Filter|Receives XML documents from its driver, transforms them by an XSLT stylesheet, and passes them to its sinks.
| All |Filter|Receives XML documents from its driver, collects all of them into a new XML documents, and passes it to its sinks.
| Snip |Filter|Receives XML documents from its driver, extracts all document fragments matching an XPath expression, and passes them to its sinks with each fragment being one document.
| Output |Sink|Receives XML documents from its driver and writes them into files.
|=================

=== Chionographis driver

A _Chionographis_ driver reads external XML documents from files and emits them into sinks it has.
As of now, the sources of XML documents (called _original_ sources) are files only.

This is an Ant task too, and can be configured to read documents from various sources with
Ant framework. For example, it can have filesets and exclude patterns of Ant.
For full set of its ability to accept the source information, consult Ant's document
(this task extends from _MatchingTask_, which is a common base class of Ant's core tasks, for example, _Javac_ and _Delete_.)

==== Attributes

[options="header", cols="1,3,1"]
|=================
| Attribute | Description | Required
|basedir|The base directory of this task.| No; defaults to the project's base directory
|srcdir|The source directory. If not absolute, will be resolved by the base directory of the task.| No; defaults to the task's base directory
|force|Whether this driver proceed to process even if existing output files seem new enough. The descendants (sinks, sinks' sinks, and so on) can not override this to +no+.| No; defaults to +no+
|cache|Whether this driver uses a document cache shared in Chionographis library for external parsed entities. When set to +no+, the performance will fall significantly. This option is provided to enable users to evade a certain XSLT processor's bug.| No; defaults to +no+
|verbose|Whether this task promotes log levels from +verbose+ to +info+ for some log entries, such as reports of document output.| No; defaults to +no+
|parallel|Whether parallel execution is employed. The parallel execution is done with static thread pool whose maximum thread count coincides with the available processor count.| No; defaults to +yes+
|Other _MatchingTask_'s attributes|Please consult Ant's document.|No
|=================

==== Nested elements

[options="header", cols="1,3,1"]
|=================
| Element | Description | Required
|meta|An instruction that the driver shall put a processing instruction (PI) which includes the meta-information of the original source document. The PIs shall be put as the first children of the document element.| No; can be appear arbitrary number of times
|namespace|A pair of a namespace prefix and a namespace name which is mapped from the prefix. This mapping is used by descentant _Transform_, _All_ and _Snip_ drivers.| No
|depends|Resources depended by this task additionally. The resources are used only to decide whether the corresponding output files are up to date.| No
|transform|A _Transform_ sink. .4+| No; at least one sink required
|all|An _All_ sink.
|snip|A _Snip_ sink.
|output|An _Output_ sink.
|Other _MatchingTask_'s nested elements|Please consult Ant's document.|No
|=================

===== Meta element's attributes

[options="header", cols="1,3,1"]
|=================
| Attribute | Description | Required

|name|The target of the processing instruction (PI).| No; defaulted to +chionographis-+ and the type concatenated, for example, +chionographis-file-name+

|type|The type of the meta-information, which is the data of PI.  +
When +uri+, the data shall be the absolute URI of the original source. +
When +file-name+, the data shall be the last part of the path of the URI. +
When +file-title+, the data shall be the substring of the file name before its last period (+.+).| Yes

|=================

===== Namespace element's attributes

[options="header", cols="1,3,1"]
|=================
| Attribute | Description | Required
|prefix|The prefix.| Yes
|uri|The namespace name (URI) mapped from the prefix. | Yes
|=================

===== Depends element's attributes and child elements

[options="header", cols="1,3,1"]
|=================
| Attribute / Nested element | Description | Required
|attribute: absent|An instruction how depended resources which do not exist are treated. +
When +fail+, the execution will terminate with an error. +
When +new+, the absent depended resources are regarded ``very new'', so that the corresponding output files are regarded as not up to date. +
When +ignore+, the absent depended resources are silently ignored.| No; defaults to +fail+
|element: _resource collection_|The depended resources represented by an Ant resource collection such as a _fileset_. | Yes

|=================


=== Transform filter

A _Transform_ filter receives XML documents, and apply transformation by an XSLT stylesheet,
generates output XML documents one per one input document and pass them to sinks it has.

==== Attributes

[options="header", cols="1,3,1"]
|=================
| Attribute | Description | Required

|style|The URI of the XSLT stylesheet. If not absolute, will be resolved by the base directory of the task.| Yes

|force|Whether this filter proceed to process even if existing output files seem new enough. The descendants (sinks, sinks' sinks, and so on) can not override this to +no+.| No; defaults to +no+

|cache|Whether this driver uses a document cache shared in Chionographis library for +<xsl:include>+, +<xsl:import>+, XPath +document()+ functions, and external entities referred by documents above.  +
 When set to +no+, the performance will fall significantly. This option is provided to enable users to evade a certain XSLT processor's bug.| No; defaults to +yes+
|=================

==== Nested elements

[options="header", cols="1,3,1"]
|=================
| Element | Description | Required
|param|A key-value pair of stylesheet parameter. As of now, only string parameter values are supported.| No
|depends|Resources depended by this filter additionally. The resources are used only to decide whether the corresponding output files are up to date. +
The way to configure this element is the same as that to configure one that appears in _Chionographis_ driver. So please see the _Chionographis_ driver's explanation for details.| No
|transform|A _Transform_ sink. .4+| No; at least one sink required
|all|An _All_ sink.
|snip|A _Snip_ sink.
|output|An _Output_ sink.
|=================


===== Param element's attributes / text content

[options="header", cols="1,3,1"]
|=================
| Attribute | Description | Required

|name|The name of the stylesheet parameter. +
Supported forms are +localName+, +prefix:localName+ and +{namespaceURI}localName+. In the first form, the name doesn't belong to any namespace. In the second form, the name belongs to a namespace whose name is mapped from prefix using the _Chionographis_'s child _namespace_ elements.| Yes

|(text)|The value of the stylesheet parameter. | Yes
|=================


=== All filter

An _All_ filter receives XML documents, collects all of their document elements,
arranges them as child elements of a newly-created XML document's document element,
and passes the resulted document to sinks it has.
The number of document passed to the sinks is always one.

[NOTE]
The document order of the collected elements in the resulted document is not specified.
If the order is significant, you should sort the elements by a descendant _Transform_ filter.

==== Attributes

[options="header", cols="1,3,1"]
|=================
| Attribute | Description | Required

|root|The name of the document element of the resulted document. +
Supported forms are +localName+, +prefix:localName+ and +{namespaceURI}localName+. In the first form, the name doesn't belong to any namespace. In the second form, the name belongs to a namespace whose name is mapped from the prefix using the _Chionographis_'s child _namespace_ elements.| Yes

|force|Whether this filter proceed to process even if existing output files seem new enough. The descendants (sinks, sinks' sinks, and so on) can not override this to +no+.| No; defaults to +no+; see note
|=================

[NOTE]
If the set of the original source documents is constant (regardless of whether
each document's content is modified), setting _force_ to +no+ or
leaving it to be defaulted is generally safe.
Otherwise, setting _force_ to +no+ is possibly dangerous because the _All_
filter can overlook the possible changes in resulted document when source
documents are added or removed.

==== Nested elements

[options="header", cols="1,3,1"]
|=================
| Element | Description | Required
|transform|A _Transform_ sink. .4+| No; at least one sink required
|all|An _All_ sink.
|snip|A _Snip_ sink.
|output|An _Output_ sink.
|=================


=== Snip filter

A _Snip_ filter receives XML documents, generates document fragments pointed by an XPath criterion from them,
and passes the resulted document fragments as independent documents to sinks it has.

==== Attributes

[options="header", cols="1,3,1"]
|=================
| Attribute | Description | Required

|select|An XPath expression which specifies the unit in which the source document is snipped. +
It can include names which belong some namespaces only when the namespaces are denoted by prefixes defined in the _Chinographis_'s child _namespace_ elements.| Yes

|force|Whether this filter proceed to process even if existing output files seem new enough. The descendants (sinks, sinks' sinks, and so on) can not override this to +no+.| No; defaults to +no+
|=================

==== Nested elements

[options="header", cols="1,3,1"]
|=================
| Element | Description | Required
|transform|A _Transform_ sink. .4+| No; at least one sink required
|all|An _All_ sink.
|snip|A _Snip_ sink.
|output|An _Output_ sink.
|=================


=== Output sink

An _Ouput_ sink receives XML documents and writes them into filesystem files.

By default, this sink tries to avoid overwriting existing up-to-date files.
Whether a destination file is up to date or not is decided by comparing its last
modification time with the ones of the original source files and the ones of the
stylesheet files.

As of now, last modification times of external entities,
included or imported stylesheet files,
and document files read through XSLT +document()+ functions are not reflected on
the decision. In addition, if the stylesheets are not files
(that is, they have URIs with schemes other than +file+),
their last modified times are regarded _very new_,
so the destination files are always overwritten.

==== Attributes

[options="header", cols="1,3,1"]
|=================
| Attribute | Description | Required

|destdir|The destination directory. If not absolute, will be resolved by the base directory of the task.| No; defaults to the task's base directory

|dest|The destination file path. If not absolute, will be resolved by the destination directory.| No; see note

|refer|An XPath expression which points the content of the _source document_ (see below) required to decide the output file path. +
The string value of the pointee is used as an input to the installed file mapper if any, otherwise is used as if it is set to _dest_ attribute.  +
_Transform_ drivers retrieve the pointee from the source documents of the transformation; on the other hand, the _Chionographis_, _All_, and _Snip_ drivers retrieve from their result document (the source document of this sink). +
The XPath expression can include names which belong some namespaces only when the namespaces are denoted by prefixes defined in the task's child _namespace_ elements.| No; see note

|mkdirs|Whether this sink creates parent directories of the destination file if needed.| No; defaults to +yes+

|force|Whether this sink creates output files even if existing files seem new enough.| No; defaults to +no+
|=================

==== Nested elements

[options="header", cols="1,3,1"]
|=================
| Element | Description | Required
|file mappers|A mapper which makes the output file names from the original source file names if _refer_ attribute not specified, otherwise from the extracted source document content pointed by _refer_ attribute.| No; see note
|=================

[NOTE]
_dest_ and file mappers can be specified exclusively. _dest_ and _refer_ can be specified exclusively. At least one of _dest_, _refer_ and a file mapper must be specified. At most one file mapper can be installed .


== Criteria for skipping processing

All drivers of Chionographis skip processing inputs which are not newer than their corresponding outputs unless they are not forced to process by _force_ attrubutes.

By default, drivers trigger processing for each input, when either the input file itself or the XSLT stylesheet files are newer than the corresponding output files.
So, in the following cases, skipping processing will occur and the corresponding outputs are left untouched:

The input XML files depend on other files which are newer:: For example, newer DTD files and newer external parsed entities don't make the input files processed.
The XSLT stylesheet files depend on other files which are newer:: For example, newer external document files referred by +document()+ XSLT functions and external stylesheet files imported by +<xsl:import>+ don't make the input files processed either.

You can tell _Chionographis_ and _Transform_ drivers to refer the newness of these depended files by _depends_ child elements.

== Parallelism

Chionographis task tries to execute in parallel unless the _Chionographis_ driver's _parallel_ attribute is set to +no+.
Actually, Chionographis task employs parallel execution only in following two situations:

Multiple original sources:: In this case, the _Chionographis_ driver reads, parses and passes them to its sinks in parallel.
Multiple fragments generated by a Snip filter:: In this case, the _Snip_ filter passes them to its sinks in parallel.

It is notable that an _All_ filter is an end point of parallel execution, for _All_ filters inherently have to wait for all the source documents to be accumulated.
Of course, if there is a _Snip_ filter in descendant of an _All_ filter, it will be a beginning point of parallelism again.

All Chionographis tasks share one common thread pool for parallelism.
So if you run multiple Chinograhis tasks simultaneously in an Ant's _Parallel_ task, they are likely to share the resource
(to be specific, it is not the case that each Chinonographis task tries to utilize all the available processors as if there are no other processor users).
